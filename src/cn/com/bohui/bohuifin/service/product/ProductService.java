package cn.com.bohui.bohuifin.service.product;/** * 表名：t_product */import cn.com.bohui.bohuifin.bean.Page;import cn.com.bohui.bohuifin.bean.ProductBean;import cn.com.bohui.bohuifin.bean.ProductOperStateBean;import cn.com.bohui.bohuifin.bean.vo.ProductVo;import cn.com.bohui.bohuifin.common.CacheUtils;import cn.com.bohui.bohuifin.consts.SystemConst;import cn.com.bohui.bohuifin.enums.EnumOperState;import cn.com.bohui.bohuifin.mapper.ProductMapper;import cn.com.bohui.bohuifin.service.product_income_record.ProductIncomeRecordService;import cn.com.bohui.bohuifin.service.product_oper_state.ProductOperStateService;import cn.com.bohui.bohuifin.service.product_tag.ProductTagService;import cn.com.bohui.bohuifin.util.LogicUtil;import org.springframework.stereotype.Service;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Servicepublic class ProductService {    @Resource    private ProductMapper productMapper;    @Resource    private ProductTagService productTagService;    @Resource    private ProductOperStateService productOperStateService;    @Resource    private ProductIncomeRecordService productIncomeRecordService;    @Resource    private CacheUtils cacheUtils;    public void saveProduct(ProductVo product, HttpServletRequest request) throws Exception {        productMapper.saveProduct(product);        productTagService.saveProductTag(product.getProductId(), product.getTagNames(), request);    }    public void updateProduct(ProductVo product, HttpServletRequest request) throws Exception {        productMapper.updateProduct(product);        productTagService.saveProductTag(product.getProductId(), product.getTagNames(), request);    }    public void updateOperState(ProductBean productBean) throws Exception {        productMapper.updateOperState(productBean);    }    public void updateState(ProductBean productBean) throws Exception {        if (productBean.getState() == SystemConst.STATE_PASS) {            changeProductOperState(productBean.getProductId());        } else if (productBean.getState() == SystemConst.STATE_REFUSE) {            productBean.setOperStateId(EnumOperState.DRAFT_BOX.value());            updateOperState(productBean);        }        productMapper.updateState(productBean);    }    /**     * 根据每一个流程状态的开始时间来计算该产品所在的流程状态并修改     * @param productId     * @throws Exception     */    public void changeProductOperState(String productId) throws Exception {        ProductBean cache = cacheUtils.getProductCache().getObject(productId);        if (cache.getOperStateId() == EnumOperState.TO_RAISE.value()) {        }        Map<String, Object> params = new HashMap<>();        params.put("productId", productId);        params.put("state", SystemConst.STATE_DEFAULT);        List<ProductOperStateBean> productOperStateBeans = productOperStateService.listProductOperStateByProductId(params);        int operStateId = EnumOperState.DRAFT_BOX.value();        long curOperStateStartTime = 0;        long curTime = new Date().getTime();        for (ProductOperStateBean bean : productOperStateBeans) {            long time = bean.getOperStateStartTime().getTime();            if (time > curOperStateStartTime && time < curTime) {                operStateId = bean.getOperStateId();                curOperStateStartTime = time;            }        }        ProductBean productBean = new ProductBean();        productBean.setProductId(productId);        productBean.setOperStateId(operStateId);        updateOperState(productBean);    }    public void updateOperIntervalSetUp(ProductBean productBean) throws Exception {        productMapper.updateOperIntervalSetUp(productBean);    }    public void updateOperIntervalSetUp(String productId, int isOperIntervalSetUp, HttpServletRequest request) throws Exception {        ProductBean productBean = new ProductBean();        productBean.setProductId(productId);        productBean.setIsOperIntervalSetUp(isOperIntervalSetUp);        LogicUtil.getInstance().saveParamsBeforeUpdate(productBean, request);        updateOperIntervalSetUp(productBean);    }    public List<ProductVo> listProductByPage(Page<ProductVo> page) throws Exception {        List<ProductVo> productVos = productMapper.listProductByPage(page);        for (ProductVo productVo : productVos) {            boolean hasCurDayIncome = productIncomeRecordService.checkHasCurDayIncome(productVo.getProductId());            productVo.setHasCurDayIncome(hasCurDayIncome);        }        return productVos;    }    public List<ProductBean> listAllProducts(Map<String, Object> params) throws Exception {        return productMapper.listAllProducts(params);    }    public List<String> listProductIds(Map<String, Object> params) throws Exception {        return productMapper.listProductIds(params);    }    public List<ProductVo> listAllProducts4View(Map<String, Object> params) throws Exception {        return productMapper.listAllProducts4View(params);    }    public ProductVo findProductById(String productId) throws Exception {        return productMapper.findProductById(productId);    }    public void removeProductById(ProductBean productBean) throws Exception {        productMapper.removeProductById(productBean);    }    public void removeProductsById(ProductVo productVo) throws Exception {        productMapper.removeProductsById(productVo);    }    /**     * 判断是否存在该产品     * @param productId     * @return     * @throws Exception     */    public boolean checkProductExist(String productId) throws Exception {        ProductVo productVo = productMapper.findProductById(productId);        if (productVo != null) {            if (productVo.getState() != SystemConst.STATE_DELETE) {                return true;            }        }        return false;    }    /**     * 检查是否存在重名的产品     * @param productId     * @param productName     * @return     * @throws Exception     */    public boolean checkProductExist(String productId, String productName) throws Exception {        ProductBean productBean = new ProductBean();        productBean.setProductId(productId);        productBean.setProductName(productName);        productBean.setState(SystemConst.STATE_DEFAULT);        ProductBean result = productMapper.getProductBean(productBean);        if (result != null) {            return true;        } else {            return false;        }    }}