package cn.com.bohui.bohuifin.service.product_tag;/** * 表名：t_product_tag */import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.util.zz.StringUtil;import cn.com.bohui.bohuifin.bean.ProductProductTagBean;import cn.com.bohui.bohuifin.bean.vo.ProductProductTagVo;import cn.com.bohui.bohuifin.consts.SeqConst;import cn.com.bohui.bohuifin.consts.SystemConst;import cn.com.bohui.bohuifin.mapper.SequencesMapper;import cn.com.bohui.bohuifin.service.product_product_tag.ProductProductTagService;import cn.com.bohui.bohuifin.service.sequences.SequencesService;import cn.com.bohui.bohuifin.util.LogicUtil;import org.springframework.stereotype.Service;import cn.com.bohui.bohuifin.mapper.ProductTagMapper;import java.util.HashMap;import java.util.List;import java.util.ArrayList;import java.util.Map;import cn.com.bohui.bohuifin.bean.Page;import cn.com.bohui.bohuifin.bean.ProductTagBean;@Servicepublic class ProductTagService {    @Resource    private ProductTagMapper productTagMapper;    @Resource    private SequencesService sequencesService;    @Resource    private ProductProductTagService productProductTagService;    public void saveProductTag(ProductTagBean productTagBean) throws Exception {        productTagMapper.saveProductTag(productTagBean);    }    public void saveProductTag(String productId, String tagNames, HttpServletRequest request) throws Exception {        Map<String, Object> params = new HashMap<>();        params.put("productId", productId);        params.put("state", SystemConst.STATE_DEFAULT);        // 获取产品曾经对应的标签名集合        List<String> productTagNames = listProductTagNameByProductId(params);        List<String> needAddTagNames = new ArrayList<>();        if (!StringUtil.isEmpty(tagNames)) {            String[] tagNameSplit = tagNames.split(",");            for (String tagName : tagNameSplit) {                if (productTagNames.contains(tagName)) {                    productTagNames.remove(tagName);                } else {                    needAddTagNames.add(tagName);                }            }        }        // 移除需要移除的标签        ProductProductTagVo productProductTagVo = new ProductProductTagVo();        productProductTagVo.setProductId(productId);        productProductTagVo.setState(SystemConst.STATE_DELETE);        productProductTagVo.setPrevState(SystemConst.STATE_DEFAULT);        productProductTagVo.setTagNames(productTagNames);        productProductTagService.removeProductProductTagByProductIdAndTagName(productProductTagVo);        // 添加新标签        for (String tagName : needAddTagNames) {            ProductTagBean bean = new ProductTagBean();            bean.setTagName(tagName);            // 查询是否存在相同的标签名            ProductTagBean productTagByTagName = findProductTagByTagName(bean);            if (productTagByTagName == null) {                // 不存在，则需要添加标签，并关联产品和标签                bean.setTagId(sequencesService.haveSeq(SeqConst.SEQ_PRODUCT_TAG).intValue());                LogicUtil.getInstance().saveParamsBeforeInsert(bean, request);                saveProductTag(bean);                ProductProductTagBean productProductTagBean = new ProductProductTagBean();                productProductTagBean.setProductId(productId);                productProductTagBean.setTagId(bean.getTagId());                LogicUtil.getInstance().saveParamsBeforeInsert(productProductTagBean, request);                productProductTagService.saveProductProductTag(productProductTagBean);            } else {                // 存在，则判断标签状态，如果是已删状态，则将状态修改成正常状态，并关联产品和标签                if (productTagByTagName.getState() != SystemConst.STATE_DEFAULT) {                    productTagByTagName.setState(SystemConst.STATE_DEFAULT);                    LogicUtil.getInstance().saveParamsBeforeUpdate(productTagByTagName, request);                    updateProductTag(productTagByTagName);                }                ProductProductTagBean productProductTagBean = new ProductProductTagBean();                productProductTagBean.setProductId(productId);                productProductTagBean.setTagId(productTagByTagName.getTagId());                LogicUtil.getInstance().saveParamsBeforeInsert(productProductTagBean, request);                productProductTagService.saveProductProductTag(productProductTagBean);            }        }    }    public void updateProductTag(ProductTagBean productTagBean) throws Exception {        productTagMapper.updateProductTag(productTagBean);    }    public ProductTagBean findProductTagByTagName(ProductTagBean productTagBean) throws Exception {        return productTagMapper.findProductTagByTagName(productTagBean);    }    public List<ProductTagBean> listProductTagByPage(Page<ProductTagBean> page) throws Exception {        return productTagMapper.listProductTagByPage(page);    }    public List<ProductTagBean> listProductTagByProductId(Map<String, Object> params) throws Exception {        return productTagMapper.listProductTagByProductId(params);    }    public List<String> listProductTagNameByProductId(Map<String, Object> params) throws Exception {        return productTagMapper.listProductTagNameByProductId(params);    }    public void removeProductTagByProductIdAndTagName(Map<String, Object> params) throws Exception {        productTagMapper.removeProductTagByProductIdAndTagName(params);    }    public void removeProductTagById(ProductTagBean productTagBean) throws Exception {        productTagMapper.removeProductTagById(productTagBean);    }}