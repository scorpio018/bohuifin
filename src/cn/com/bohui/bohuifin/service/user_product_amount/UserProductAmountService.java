package cn.com.bohui.bohuifin.service.user_product_amount;/** * 表名：t_user_product_amount */import cn.com.bohui.bohuifin.bean.Page;import cn.com.bohui.bohuifin.bean.ProductBean;import cn.com.bohui.bohuifin.bean.UserProductAmountBean;import cn.com.bohui.bohuifin.bean.UsersBean;import cn.com.bohui.bohuifin.common.CacheUtils;import cn.com.bohui.bohuifin.consts.JsonCodeConst;import cn.com.bohui.bohuifin.consts.SeqConst;import cn.com.bohui.bohuifin.consts.SystemConst;import cn.com.bohui.bohuifin.mapper.UserProductAmountMapper;import cn.com.bohui.bohuifin.service.product.ProductService;import cn.com.bohui.bohuifin.service.sequences.SequencesService;import cn.com.bohui.bohuifin.service.user_accounts.UserAccountsService;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.sql.Timestamp;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Servicepublic class UserProductAmountService {    @Resource    private UserProductAmountMapper userProductAmountMapper;    @Resource    private UserAccountsService userAccountsService;    @Resource    private ProductService productService;    @Resource    private SequencesService sequencesService;    @Resource    private CacheUtils cacheUtils;    public void saveUserProductAmount(UserProductAmountBean userProductAmountBean) throws Exception {        userProductAmountMapper.saveUserProductAmount(userProductAmountBean);    }    public void updateUserProductAmount(UserProductAmountBean userProductAmountBean) throws Exception {        userProductAmountMapper.updateUserProductAmount(userProductAmountBean);    }    public List<UserProductAmountBean> listUserProductAmountByPage(Page<UserProductAmountBean> page) throws Exception {        return userProductAmountMapper.listUserProductAmountByPage(page);    }    public List<UserProductAmountBean> listUserProductAmountByUser(String userId) throws Exception {        return userProductAmountMapper.listUserProductAmountByUser(userId);    }    public List<UserProductAmountBean> listUserProductAmountByProduct(String productId) throws Exception {        return userProductAmountMapper.listUserProductAmountByProduct(productId);    }    public int productInvestment(String userId, String productId, double investAccount) throws Exception {        // 检查用户、产品是否存在        int code = validate(userId, productId);        if (code != JsonCodeConst.CODE_SUCCESS) {            return code;        }        // 检查产品可投资金额是否小于用户想投资的金额        ProductBean productBean = cacheUtils.getProductCache().getObject(productId);        if (investAccount > productBean.getInvestableAmount()) {            return JsonCodeConst.CODE_INVEST_ACCOUNT_IS_GATHER_THAN_INVESTABLE_ACCOUNT;        }        // 检查用户余额是否满足        double userAccounts = userAccountsService.findUserAccounts(userId);        if (userAccounts < investAccount) {            return JsonCodeConst.CODE_USER_ACCOUNT_NOT_ENOUGH;        }        // 保存用户对产品的投资金额        saveUserProductAmount(userId, productId, investAccount);        // 修改产品的可投资金额        Map<String, Object> params = new HashMap<>();        params.put("investAccount", investAccount);        params.put("productId", productId);        productService.changeInvestableAmount(params);        return code;    }    /**     * 保存用户对产品的投资金额     * @param userId     * @param productId     * @param amount     * @throws Exception     */    public void saveUserProductAmount(String userId, String productId, double amount) throws Exception {        UserProductAmountBean userProductAmountBean = new UserProductAmountBean();        userProductAmountBean.setAmountId(sequencesService.haveSeq(SeqConst.SEQ_AMOUNT));        userProductAmountBean.setUserId(userId);        userProductAmountBean.setProductId(productId);        userProductAmountBean.setAmount(amount);        Timestamp nowTimestamp = new Timestamp(new Date().getTime());        userProductAmountBean.setCreateTime(nowTimestamp);        userProductAmountBean.setState(SystemConst.STATE_WAIT_CONFIRM);        saveUserProductAmount(userProductAmountBean);    }    public int validate(String userId, String productId) throws Exception {        UsersBean cacheUserBean = cacheUtils.getUserCache().getObject(userId);        if (cacheUserBean == null) {            return JsonCodeConst.CODE_ERROR_NO_USER;        }        ProductBean cacheProductBean = cacheUtils.getProductCache().getObject(productId);        if (cacheProductBean == null) {            return JsonCodeConst.CODE_ERROR_NO_PRODUCT;        }        return JsonCodeConst.CODE_SUCCESS;    }    public void removeUserProductAmountById(UserProductAmountBean userProductAmountBean) throws Exception {        userProductAmountMapper.removeUserProductAmountById(userProductAmountBean);    }}