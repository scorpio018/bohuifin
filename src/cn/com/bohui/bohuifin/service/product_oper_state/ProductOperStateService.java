package cn.com.bohui.bohuifin.service.product_oper_state;/** * 表名：t_product_oper_state */import cn.com.bohui.bohuifin.bean.Page;import cn.com.bohui.bohuifin.bean.ProductBean;import cn.com.bohui.bohuifin.bean.ProductOperStateBean;import cn.com.bohui.bohuifin.consts.SystemConst;import cn.com.bohui.bohuifin.enums.EnumOperState;import cn.com.bohui.bohuifin.mapper.ProductOperStateMapper;import cn.com.bohui.bohuifin.service.product.ProductService;import cn.com.bohui.bohuifin.util.LogicUtil;import cn.com.bohui.bohuifin.util.TimeUtil;import org.springframework.stereotype.Service;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.sql.Timestamp;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Servicepublic class ProductOperStateService {    @Resource    private ProductOperStateMapper productOperStateMapper;    @Resource    private ProductService productService;    public void saveProductOperState(String productId, String[] operStateStartTime, HttpServletRequest request) throws Exception {        Map<String, Object> params = new HashMap<>();        params.put("productId", productId);        params.put("state", SystemConst.STATE_DEFAULT);        EnumOperState[] values = EnumOperState.values();        int i = 0;        for (EnumOperState value : values) {            if (value == EnumOperState.DRAFT_BOX) {                continue;            }            // 将传入的时间字符串转换成时间戳            Date dateYMD = TimeUtil.getDateYMD(operStateStartTime[i]);            long timeYMD = dateYMD.getTime();            Timestamp timestamp = new Timestamp(timeYMD);            params.put("operStateId", value.value());            ProductOperStateBean resultBean = findProductOperStateByProductAndOperState(params);            if (resultBean == null) {                resultBean = new ProductOperStateBean();                resultBean.setOperStateId(value.value());                resultBean.setProductId(productId);                resultBean.setOperStateStartTime(timestamp);                LogicUtil.getInstance().saveParamsBeforeInsert(resultBean, request);                productOperStateMapper.saveProductOperState(resultBean);            } else {                resultBean.setOperStateStartTime(timestamp);                LogicUtil.getInstance().saveParamsBeforeUpdate(resultBean, request);                productOperStateMapper.updateProductOperState(resultBean);            }            i++;        }        ProductBean productBean = new ProductBean();        productBean.setProductId(productId);        productBean.setIsOperIntervalSetUp(SystemConst.IS_OPER_INTERVAL_SET_UP_YES);        LogicUtil.getInstance().saveParamsBeforeUpdate(productBean, request);        productService.updateOperIntervalSetUp(productBean);    }    public void updateProductOperState(ProductOperStateBean productOperStateBean) throws Exception {        productOperStateMapper.updateProductOperState(productOperStateBean);    }    public List<ProductOperStateBean> listProductOperStateByPage(Page<ProductOperStateBean> page) throws Exception {        return productOperStateMapper.listProductOperStateByPage(page);    }    public List<ProductOperStateBean> listProductOperStateByProductId(Map<String, Object> params) throws Exception {        return productOperStateMapper.listProductOperStateByProductId(params);    }    public ProductOperStateBean findProductOperStateByProductAndOperState(Map<String, Object> params) throws Exception {        return productOperStateMapper.findProductOperStateByProductAndOperState(params);    }    public void removeProductOperStateById(ProductOperStateBean productOperStateBean) throws Exception {        productOperStateMapper.removeProductOperStateById(productOperStateBean);    }}